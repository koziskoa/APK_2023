# Form implementation generated from reading ui file 'form.ui'
#
# Created by: PyQt6 UI code generator 6.2.3
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from algorithms import *
from draw import Draw
import csv

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.Canvas = Draw(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Canvas.sizePolicy().hasHeightForWidth())
        self.Canvas.setSizePolicy(sizePolicy)
        self.Canvas.setObjectName("Canvas")
        self.horizontalLayout.addWidget(self.Canvas)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 17))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        #self.menuElement = QtWidgets.QMenu(self.menubar)
        #self.menuElement.setObjectName("menuElement")
        self.menuSimplify = QtWidgets.QMenu(self.menubar)
        self.menuSimplify.setObjectName("menuSimplify")
        self.menuOptions = QtWidgets.QMenu(self.menubar)
        self.menuOptions.setObjectName("menuOptions")
        self.menuHelp = QtWidgets.QMenu(parent=self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.ToolBarArea.TopToolBarArea, self.toolBar)
        #self.actionOpen = QtGui.QAction(MainWindow)
        #icon = QtGui.QIcon()
        #icon.addPixmap(QtGui.QPixmap("icons/open_file.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        #self.actionOpen.setIcon(icon)
        #self.actionOpen.setObjectName("actionOpen")
        self.actionElement = QtGui.QAction(MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icons/element.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionElement.setIcon(icon1)
        self.actionElement.setObjectName("actionElement")
        self.actionBarrier = QtGui.QAction(MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("icons/barrier.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionBarrier.setIcon(icon2)
        self.actionBarrier.setObjectName("actionBarrier")
        self.actionDisplace_1_element = QtGui.QAction(MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("icons/displace.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionDisplace_1_element.setIcon(icon3)
        self.actionDisplace_1_element.setObjectName("actionDisplace_1_element")
        self.actionClear = QtGui.QAction(MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("icons/clear.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionClear.setIcon(icon4)
        self.actionClear.setObjectName("actionClear")
        self.actionSettings = QtGui.QAction(MainWindow)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("icons/settings.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionSettings.setIcon(icon5)
        self.actionSettings.setObjectName("actionSettings")
        self.actionExit = QtGui.QAction(MainWindow)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("icons/exit.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionExit.setIcon(icon6)
        self.actionExit.setObjectName("actionExit")
        self.actionAbout = QtGui.QAction(MainWindow)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("icons/about.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionAbout.setIcon(icon7)
        self.actionAbout.setObjectName("actionAbout")
        #self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionElement)
        self.menuFile.addAction(self.actionBarrier)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        #self.menuElement.addAction(self.actionElement)
        #self.menuElement.addAction(self.actionBarrier)
        self.menuSimplify.addAction(self.actionDisplace_1_element)
        self.menuSimplify.addSeparator()
        self.menuSimplify.addAction(self.actionClear)
        self.menuOptions.addAction(self.actionSettings)
        self.menuHelp.addAction(self.actionAbout)
        self.menubar.addAction(self.menuFile.menuAction())
        #self.menubar.addAction(self.menuElement.menuAction())
        self.menubar.addAction(self.menuSimplify.menuAction())
        self.menubar.addAction(self.menuOptions.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        #self.toolBar.addAction(self.actionOpen)
        #self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionElement)
        self.toolBar.addAction(self.actionBarrier)
        self.toolBar.addAction(self.actionDisplace_1_element)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionSettings)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionClear)

        #User-defined actions
        self.actionDisplace_1_element.triggered.connect(self.displaceClick)
        self.actionElement.triggered.connect(self.drawLineClick)
        self.actionBarrier.triggered.connect(self.drawBarrierClick)
        self.actionClear.triggered.connect(self.clearClick)
        #self.actionOpen.triggered.connect(self.processFile)
        self.actionAbout.triggered.connect(self.aboutClick)
        self.actionExit.triggered.connect(self.exitClick)
        self.actionSettings.triggered.connect(self.setSplineSettings)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Energy Splines"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        #self.menuElement.setTitle(_translate("MainWindow", "Input"))
        self.menuSimplify.setTitle(_translate("MainWindow", "Simplify"))
        self.menuOptions.setTitle(_translate("MainWindow", "Options"))
        self.menuHelp.setTitle(_translate("MainForm", "Help"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        #self.actionOpen.setText(_translate("MainWindow", "Open..."))
        self.actionExit.setText(_translate("MainForm", "Exit"))
        self.actionElement.setText(_translate("MainWindow", "Load Element..."))
        self.actionBarrier.setText(_translate("MainWindow", "Load Barrier..."))
        self.actionDisplace_1_element.setText(_translate("MainWindow", "Displace 1 element"))
        self.actionClear.setText(_translate("MainWindow", "Clear"))
        self.actionSettings.setText(_translate("MainWindow", "Settings..."))
        self.actionAbout.setText(_translate("MainForm", "About..."))

    def __init__(self):
        self.__dmin = 50
        self.__iters = 50
        self.__alpha = 1
        self.__beta = 1000
        self.__gamma = 1000
        self.__lamb = 1000

    def setSplineSettings(self):
        """Sets input contour parameters."""
        a = Algorithms()
        # Execute contour dialog window
        dialog = InputDialog(self.__dmin, self.__iters, self.__alpha, self.__beta, self.__gamma, self.__lamb)
        # On signal accepted
        if dialog.exec():
            # Get input values
            dmin, iters, alpha, beta, gamma, lamb = dialog.getInputs()
            # Convert input to int and set values
            try:
                dmin = int(dmin)
                iters = int(iters)
                alpha = float(alpha)
                beta = float(beta)
                gamma = float(gamma)
                lamb = float(lamb)
                self.__dmin = dmin
                self.__iters = iters
                self.__alpha = alpha
                self.__beta = beta
                self.__gamma = gamma
                self.__lamb = lamb
            # Input is string or invalid
            except ValueError:
                # Set default contour settings and alert the user
                self.setSplineDefaultSettings()
                self.splineInvalidInput()
        else:
            return

    def setSplineDefaultSettings(self):
        """Returns contour settings."""
        self.__dmin = 50
        self.__iters = 50
        self.__alpha = 1
        self.__beta = 1000
        self.__gamma = 1000
        self.__lamb = 1000

    def splineInvalidInput(self):
        """Opens a popup to inform of invalid input."""
        dlg = QMessageBox()
        dlg.setWindowTitle("Invalid Input")
        dlg.setText(
            "The input for spline settings is invalid. Default settings have been applied.")
        dlg.exec()

    def displaceClick(self):
        #Get polyline and barrier
        L = self.Canvas.getL()
        B = self.Canvas.getB()

        #Run displacement
        a = Algorithms()
        #d, xq, yq = a.getPointLineDistance(100, 100, 0, 100, 100, 90)
        LD = a.minEnergySpline(L, B, self.__alpha, self.__beta, self.__gamma, self.__lamb, self.__dmin, self.__iters)

        #Set results
        self.Canvas.setLD(LD)

        #Repaint
        self.Canvas.repaint()

    def drawLineClick(self):
        self.Canvas.setSource(True)
        self.processFile()

    def drawBarrierClick(self):
        self.Canvas.setSource(False)
        self.processFile()

    def clearClick(self):
        self.Canvas.clearAll()
        self.Canvas.repaint()

    def openFile(self):
        """Opens CSV file."""
        filename, _ = QFileDialog.getOpenFileName(caption="Open File", directory="input_files/.",
                                                  filter="CSV file (*.csv)")
        # Return if no file has been opened
        if filename == "":
            return None
        # Load data from CSV
        with open(filename, 'r', encoding='utf-8-sig') as f:
            data = csv.reader(f, delimiter = ';')
            self.Canvas.loadData(data)

    def processFile(self):
        """Handles opening and loading data."""
        # Open file
        data = self.openFile()
        # Return if no file has been opened
        if data == None:
            return
        # Clear canvas for new point layer
        #self.Canvas.clearCanvas()
        # Try to load and process the data
        correct_data = self.Canvas.loadData(data)
        # Alert the user if CSV has incorrect formatting
        if correct_data == False:
            dlg = QtWidgets.QMessageBox()
            dlg.setWindowTitle("Error Message")
            dlg.setText("Invalid CSV file")
            dlg.exec()

    def aboutClick(self):
        """Opens GitHub repository link."""
        url = QUrl("https://github.com/koziskoa/APK_2023/tree/master/Energy_spline")
        QDesktopServices.openUrl(url)

    def exitClick(self):
        """Closes the application."""
        sys.exit()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())