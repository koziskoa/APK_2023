# Form implementation generated from reading ui file 'form.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from draw import Draw
from algorithms import *
import sys
class Ui_MainForm(object):
    def setupUi(self, MainForm):
        MainForm.setObjectName("MainForm")
        MainForm.setFixedSize(1000, 800)
        self.centralwidget = QtWidgets.QWidget(parent=MainForm)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.Canvas = Draw(parent=self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Canvas.sizePolicy().hasHeightForWidth())
        self.Canvas.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)
        self.Canvas.setObjectName("Canvas")
        self.horizontalLayout.addWidget(self.Canvas)
        MainForm.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainForm)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(parent=self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuAnalyze = QtWidgets.QMenu(parent=self.menubar)
        self.menuAnalyze.setObjectName("menuAnalyze")
        self.menuHelp = QtWidgets.QMenu(parent=self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainForm.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainForm)
        self.statusbar.setObjectName("statusbar")
        MainForm.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(parent=MainForm)
        self.toolBar.setObjectName("toolBar")
        MainForm.addToolBar(QtCore.Qt.ToolBarArea.TopToolBarArea, self.toolBar)

        self.actionClear = QtGui.QAction(parent=MainForm)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons/clear.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionClear.setIcon(icon)
        self.actionClear.setObjectName("actionClear")

        self.actionRaycrossing = QtGui.QAction(parent=MainForm)
        self.actionWindingnumber = QtGui.QAction(parent=MainForm)
        self.actionOpen = QtGui.QAction(parent=MainForm)
        self.actionAbout = QtGui.QAction(parent=MainForm)
        self.actionAbout.setObjectName("actionAbout")

        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("icons/open_file.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionOpen.setIcon(icon2)
        self.actionOpen.setObjectName("actionOpen")
        self.actionExit = QtGui.QAction(parent=MainForm)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("icons/exit.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionExit.setIcon(icon3)
        self.actionExit.setObjectName("actionExit")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("icons/raycrossing3.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionRaycrossing.setIcon(icon4)
        self.actionRaycrossing.setObjectName("actionRayCrossing")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("icons/windingnumber.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionWindingnumber.setIcon(icon5)
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("icons/about.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionAbout.setIcon(icon6)
        self.menuAnalyze.addAction(self.actionRaycrossing)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menuAnalyze.addAction(self.actionWindingnumber)
        self.menubar.addAction(self.menuAnalyze.menuAction())
        self.menuAnalyze.addSeparator()
        self.menuAnalyze.addAction(self.actionClear)
        self.menubar.addAction(self.menuAnalyze.menuAction())

        self.menuHelp.addAction(self.actionAbout)
        self.menubar.addAction(self.menuHelp.menuAction())
        self.toolBar.addAction(self.actionOpen)
        self.toolBar.addSeparator()

        self.toolBar.addAction(self.actionClear)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionExit)
        self.toolBar.addSeparator()

        self.buttonRC = QtWidgets.QRadioButton(text="Ray Crossing Algorithm", checkable=True)
        self.buttonWN = QtWidgets.QRadioButton(text="Winding Number Algorithm", checkable=True)
        self.buttonRC.clicked.connect(self.analyzeRayCrossing)
        self.buttonWN.clicked.connect(self.analyzeWindingNumber)
        self.group = QtWidgets.QButtonGroup(exclusive=True)

        for button in (self.buttonRC, self.buttonWN):
            self.toolBar.addWidget(button)
            self.group.addButton(button)

        self.retranslateUi(MainForm)
        QtCore.QMetaObject.connectSlotsByName(MainForm)
        #self.actionPoint_Polygon.triggered.connect(self.switchSourceClick)

        self.actionRaycrossing.triggered.connect(self.analyzeRayCrossing)
        self.actionWindingnumber.triggered.connect(self.analyzeWindingNumber)
        self.actionAbout.triggered.connect(self.aboutClick)

        self.buttonRC.clicked.connect(self.analyzeRayCrossing)
        self.buttonWN.clicked.connect(self.analyzeWindingNumber)
        self.buttonRC.setToolTip("Determine the point's position using Ray Crossing Algorithm")
        self.buttonWN.setToolTip("Determine the point's position using Winding Number Algorithm")
        self.actionOpen.triggered.connect(self.openFileClick)
        self.actionExit.triggered.connect(self.exitClick)
        self.actionClear.triggered.connect(self.clearClick)

    def retranslateUi(self, MainForm):
        _translate = QtCore.QCoreApplication.translate
        MainForm.setWindowTitle(_translate("MainForm", "Point in Polygon Analyser"))
        self.menuFile.setTitle(_translate("MainForm", "File"))
        self.menuAnalyze.setTitle(_translate("MainForm", "Analyze"))
        self.menuHelp.setTitle(_translate("MainForm", "Help"))
        self.toolBar.setWindowTitle(_translate("MainForm", "toolBar"))
        self.actionClear.setText(_translate("MainForm", "Clear"))
        self.actionRaycrossing.setText(_translate("MainForm", "Ray Crossing Algorithm"))
        self.actionWindingnumber.setText(_translate("MainForm", "Winding Number Algorithm"))
        self.actionAbout.setText(_translate("MainForm", "About..."))
        #self.actionPoint_and_polygon_position.setShortcut(_translate("MainForm", "Ctrl+A"))
        self.actionOpen.setText(_translate("MainForm", "Open"))
        self.actionExit.setText(_translate("MainForm", "Exit"))

    def analyzeRayCrossing(self):
        # get point and polygon
        q = self.Canvas.getPoint()
        pol_list = self.Canvas.getPolygonList()

        #analyze pozition
        a = Algorithms()
        for i in range(len(pol_list)):
            res = a.rayCrossingAlgorithm(q, pol_list[i])
            self.Canvas.is_highlighted[i] = res
            self.Canvas.repaint()
        if -1 in self.Canvas.is_highlighted:
            self.onEdgePopup()

    def analyzeWindingNumber(self):
        # get point and polygon
        q = self.Canvas.getPoint()
        pol_list = self.Canvas.getPolygonList()

        # analyze pozition
        a = Algorithms()
        for i in range(len(pol_list)):
            res = a.windingNumber(q, pol_list[i])
            self.Canvas.is_highlighted[i] = res
            self.Canvas.repaint()

        if -1 in is_highlighted:
            self.onEdgePopup()

    def openFileClick(self):
        data = self.openFile()
        if data == None:
            return
        self.Canvas.loadData(data)

    def openFile(self):
        filename, _ = QFileDialog.getOpenFileName(caption="Open File", directory=".", filter="JSON file (*.json)")
        if filename == "":
            return None

        with open(filename, "r", encoding="utf-8") as f:
            data = json.load(f)
            return(data)

    def exitClick(self):
        sys.exit()

    def clearClick(self):
        self.Canvas.clearEvent()

    def aboutClick(self):
        url = QUrl("https://github.com/koziskoa/point_in_polygon")
        QDesktopServices.openUrl(url)

    def onEdgePopup(self):
        dlg = QtWidgets.QMessageBox()
        dlg.setWindowTitle("Position Report")
        dlg.setText("Point is positioned on an edge")
        dlg.exec()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainForm = QMainWindow()
    ui = Ui_MainForm()
    ui.setupUi(MainForm)
    MainForm.show()
    sys.exit(app.exec())